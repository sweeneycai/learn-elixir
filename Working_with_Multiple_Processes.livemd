<!-- livebook:{"persist_outputs":true} -->

# Working with Multiple Processes

## Handling Multiple Messages

一个最简单的线程间通信的案例

```elixir
defmodule Spawn do
  def greet do
    receive do
      {sender, msg} ->
        send(sender, {:ok, "Hello, #{msg}"})
    end
  end
end

pid = spawn(Spawn, :greet, [])
send(pid, {self(), "world!"})

receive do
  {:ok, msg} ->
    IO.puts(msg)
end
```

<!-- livebook:{"output":true} -->

```
Hello, world!
```

<!-- livebook:{"output":true} -->

```
:ok
```

对于上面的例子，我们接着向 `Spawn` 发送消息，看看会发生什么？

```elixir
send(pid, {self(), "world!"})

receive do
  {:ok, msg} ->
    IO.puts(msg)
after
  500 ->
    IO.puts("Session closed")
end
```

<!-- livebook:{"output":true} -->

```
Session closed
```

<!-- livebook:{"output":true} -->

```
:ok
```

可以看到上面的 *cell* halt 住了，这是因为上面定义的 `greet` 函数只能处理一条消息，如果要处理多条消息，需要使用递归。

```elixir
defmodule Spawn2 do
  def greet do
    receive do
      {sender, msg} ->
        send(sender, {:ok, "Hello, #{msg}"})
        greet()
    end
  end
end

pid = spawn(Spawn2, :greet, [])

send(pid, {self(), "world1"})

receive do
  {:ok, msg} ->
    IO.puts(msg)
after
  500 ->
    IO.puts("Connection closed")
end

send(pid, {self(), "world2"})

receive do
  {:ok, msg} ->
    IO.puts(msg)
after
  500 ->
    IO.puts("Connection closed")
end
```

<!-- livebook:{"output":true} -->

```
Hello, world1
Hello, world2
```

<!-- livebook:{"output":true} -->

```
:ok
```

### Recursion and the Stack

```elixir
defmodule TailRecursive do
  def factorial(n), do: _factorial(n, 1)
  def _factorial(0, acc), do: acc
  def _factorial(n, acc), do: _factorial(n - 1, n * acc)
end
```

<!-- livebook:{"output":true} -->

```
{:module, TailRecursive, <<70, 79, 82, 49, 0, 0, 7, ...>>, {:_factorial, 2}}
```

```elixir
TailRecursive.factorial(90)
```

<!-- livebook:{"output":true} -->

```
1485715964481761497309522733620825737885569961284688766942216863704985393094065876545992131370884059645617234469978112000000000000000000000
```

### Process Overhead

```elixir
defmodule Chain do
  # 要在子线程中执行的函数
  def counter(next_pid) do
    receive do
      n ->
        send(next_pid, n + 1)
    end
  end

  def create_processes(n) do
    # 创建一个新线程，并给新线程发送自己的PID
    code_to_run = fn _, send_to ->
      spawn(Chain, :counter, [send_to])
    end

    # 等价于 `fn n, acc -> code_to_run(n, acc)`
    last = Enum.reduce(1..n, self(), code_to_run)

    send(last, 0)

    receive do
      final_answer when is_integer(final_answer) ->
        "Result is #{inspect(final_answer)}"
    end
  end

  def run(n) do
    :timer.tc(Chain, :create_processes, [n])
    |> IO.inspect(lable: "processes")
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Chain, <<70, 79, 82, 49, 0, 0, 11, ...>>, {:run, 1}}
```

```elixir
Chain.run(10)
```

<!-- livebook:{"output":true} -->

```
{39, "Result is 10"}
```

<!-- livebook:{"output":true} -->

```
{39, "Result is 10"}
```

```elixir
Chain.run(100)
```

<!-- livebook:{"output":true} -->

```
{249, "Result is 100"}
```

<!-- livebook:{"output":true} -->

```
{249, "Result is 100"}
```

```elixir
Chain.run(1000)
```

<!-- livebook:{"output":true} -->

```
{4299, "Result is 1000"}
```

<!-- livebook:{"output":true} -->

```
{4299, "Result is 1000"}
```

```elixir
Chain.run(10000)
```

<!-- livebook:{"output":true} -->

```
{43853, "Result is 10000"}
```

<!-- livebook:{"output":true} -->

```
{43853, "Result is 10000"}
```

```elixir
Chain.run(40000)
```

<!-- livebook:{"output":true} -->

```
{157335, "Result is 40000"}
```

<!-- livebook:{"output":true} -->

```
{157335, "Result is 40000"}
```

```elixir
# 线程数超阈值报警
# Chain.run(4000000)
```

<!-- livebook:{"output":true} -->

```
nil
```

### When Processes Die

```elixir
defmodule Link1 do
  # 使用 erlang 的系统库
  import :timer, only: [sleep: 1]

  def sad_function do
    sleep(500)
    exit(:boom)
  end

  def run do
    spawn(Link1, :sad_function, [])

    receive do
      msg -> IO.puts("MESSAGE RECEIVED: #{inspect(msg)}")
    after
      1000 ->
        IO.puts("Nothing happend")
    end
  end
end

Link1.run()
```

<!-- livebook:{"output":true} -->

```
Nothing happend
```

<!-- livebook:{"output":true} -->

```
:ok
```

```elixir
defmodule Link2 do
  import :timer, only: [sleep: 1]

  def sad_func do
    sleep(500)
    exit(:boom)
  end

  def run do
    spawn_link(Link2, :sad_func, [])

    receive do
      msg -> IO.puts("MESSAGE RECEIVED: #{inspect(msg)}")
    after
      1000 ->
        IO.puts("Nothing happend")
    end
  end
end

# Link2.run()
```

<!-- livebook:{"output":true} -->

```
{:module, Link2, <<70, 79, 82, 49, 0, 0, 8, ...>>, {:run, 0}}
```

上面的例子在 **Livebook** 中会报错: *Evaluation process terminated - :boom*

```elixir
defmodule Link3 do
  import :timer, only: [sleep: 1]

  def sad_func do
    sleep(500)
    exit(:boom)
  end

  def run do
    # C  onvert the exit signals from a linked process 
    # into a message you can handle
    Process.flag(:trap_exit, true)
    spawn_link(Link3, :sad_func, [])

    receive do
      msg ->
        IO.puts("MESSAGE RECEIVED: #{inspect(msg)}")
    after
      1000 ->
        IO.puts("Nothing happend")
    end
  end
end

Link3.run()
```

<!-- livebook:{"output":true} -->

```
MESSAGE RECEIVED: {:EXIT, #PID<0.23332.4>, :boom}
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Monitoring a Process

_Link_ 将两个线程连接起来，调用方和被调用方之间可以互相通信。与之相反，如果一个线程监控另外一个线程，那么只有当被调用方出错异常退出的时候才会通知调用方，消息内容是 `:DOWN`。

<!-- livebook:{"break_markdown":true} -->

`Process.monitor` 和 `spawn_monitor` 都有监控的功能，但是前者不是原子性的，后者是原子性的。

```elixir
defmodule Monitor1 do
  import :timer, only: [sleep: 1]

  def sad_func do
    sleep(500)
    exit(:boom)
  end

  def run do
    spawn_monitor(Monitor1, :sad_func, [])

    receive do
      msg ->
        IO.puts("MESSAGE RECEIVED: #{inspect(msg)}")
    after
      1000 ->
        IO.puts("Nothing happend")
    end
  end
end

Monitor1.run()
```

<!-- livebook:{"output":true} -->

```
MESSAGE RECEIVED: {:DOWN, #Reference<0.3873322662.1381761030.22531>, :process, #PID<0.23336.4>, :boom}
```

<!-- livebook:{"output":true} -->

```
:ok
```

那么什么时候使用 _link_ 什么时候使用 _monitor_ 呢？

这主要取决于线程的语义。如果一个线程失败了需要停止另外一个线程，这个时候需要 _link_ 。反之，如果需要知道某些线程失败的原因，使用 _monitor_ 。

## Parallel Map —— The "Hello, World" of Erlang

有趣的事情：一个并行的 `map` 实现。

```elixir
defmodule Parallel do
  def pmap(collection, fun) do
    import :rand, only: [uniform: 1]
    import :timer, only: [sleep: 1]
    # 这里的 me 指代的是主线程，子线程的计算结果都是要返回给主线程的
    me = self()

    collection
    |> Enum.map(fn elem ->
      spawn_link(fn ->
        # 测试返回的顺序
        sleep(uniform(500))
        send(me, {self(), fun.(elem)})
      end)
    end)
    |> Enum.map(fn pid ->
      receive do
        {^pid, result} -> result
      end
    end)
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Parallel, <<70, 79, 82, 49, 0, 0, 9, ...>>, {:pmap, 2}}
```

`receive` 里面，如果是 `{ ^pid, result }`，那么返回的值会按照集合最初的顺序进行排序，反之则按照返回值的顺序进行排序。

```elixir
# 按集合顺序排序
1..10
|> Parallel.pmap(&(&1 * &1))
```

<!-- livebook:{"output":true} -->

```
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
```

```elixir
# 按返回顺序排序
1..10
|> Parallel.pmap(&(&1 * &1))
```

<!-- livebook:{"output":true} -->

```
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
```

## A Fibonacci Server

```elixir
defmodule FibSolver do
  def fib(scheduler) do
    send(scheduler, {:ready, self()})

    receive do
      {:fib, n, client} ->
        send(client, {:answer, n, fib_calc(n), self()})
        fib(scheduler)

      {:shutdown} ->
        exit(:normal)
    end
  end

  defp fib_calc(0), do: 0
  defp fib_calc(1), do: 1
  defp fib_calc(n), do: fib_calc(n - 1) + fib_calc(n - 2)
end
```

<!-- livebook:{"output":true} -->

```
{:module, FibSolver, <<70, 79, 82, 49, 0, 0, 8, ...>>, {:fib_calc, 1}}
```

### The Task Scheduler

```elixir
defmodule Scheduler do
  # num_processes: 并行度
  # to_calculate: 要运行的函数的参数
  def run(num_processes, module, func, to_calculate) do
    1..num_processes
    |> Enum.map(fn _ -> spawn(module, func, [self()]) end)
    |> schedule_processes(to_calculate, [])
  end

  defp schedule_processes(processes, queue, results) do
    receive do
      {:ready, pid} when queue != [] ->
        # worker 已经准备好执行任务，且此时有任务需要去执行
        # 从任务队列中取出一个任务并交给 worker 去执行
        [next | tail] = queue
        send(pid, {:fib, next, self()})
        # 接着调度剩下的任务
        schedule_processes(processes, tail, results)

      {:ready, pid} ->
        # 此时又有一个 worker 空闲等待处理任务
        send(pid, {:shutdown})

        if length(processes) > 1 do
          # 但是任务队列中已经没有任务要去执行了
          # 这个时候需要将 worker 所在的线程释放
          schedule_processes(List.delete(processes, pid), queue, results)
        else
          # 其他的线程都释放了，那最终就要对结果进行排序咯
          Enum.sort(results, fn {n1, _, _}, {n2, _, _} -> n1 <= n2 end)
        end

      {:answer, number, result, _pid} ->
        # 有了执行结果，把执行结果加进来
        schedule_processes(processes, queue, [{number, result, Time.utc_now()} | results])
    end
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Scheduler, <<70, 79, 82, 49, 0, 0, 12, ...>>, {:schedule_processes, 3}}
```

```elixir
to_process = List.duplicate(37, 20)
```

<!-- livebook:{"output":true} -->

```
'%%%%%%%%%%%%%%%%%%%%'
```

```elixir
Enum.each(1..10, fn num_processes ->
  # `timer.tc` 用于计时
  {time, result} = :timer.tc(Scheduler, :run, [num_processes, FibSolver, :fib, to_process])

  if num_processes == 1 do
    IO.puts(inspect(result) |> String.split("},") |> Enum.join("\n"))
    IO.puts("\n # time(s) generated_time")
  end

  :io.format("~2B ~.2f~n", [num_processes, time / 1_000_000.0])
end)
```

<!-- livebook:{"output":true} -->

```
[{37, 24157817, ~T[03:33:10.811310]
 {37, 24157817, ~T[03:33:10.536195]
 {37, 24157817, ~T[03:33:10.261267]
 {37, 24157817, ~T[03:33:09.973512]
 {37, 24157817, ~T[03:33:09.693873]
 {37, 24157817, ~T[03:33:09.418357]
 {37, 24157817, ~T[03:33:09.142824]
 {37, 24157817, ~T[03:33:08.867126]
 {37, 24157817, ~T[03:33:08.591690]
 {37, 24157817, ~T[03:33:08.316371]
 {37, 24157817, ~T[03:33:08.040654]
 {37, 24157817, ~T[03:33:07.764506]
 {37, 24157817, ~T[03:33:07.489383]
 {37, 24157817, ~T[03:33:07.211780]
 {37, 24157817, ~T[03:33:06.935541]
 {37, 24157817, ~T[03:33:06.660444]
 {37, 24157817, ~T[03:33:06.385198]
 {37, 24157817, ~T[03:33:06.106274]
 {37, 24157817, ~T[03:33:05.830094]
 {37, 24157817, ~T[03:33:05.554332]}]

 # time(s) generated_time
 1 5.63
 2 4.16
 3 2.53
 4 1.78
 5 1.39
 6 1.42
 7 1.21
 8 1.18
 9 1.34
10 1.22
```

<!-- livebook:{"output":true} -->

```
:ok
```

上面的例子可以理解为，我们的线程池中有10个线程，但我们共有20个任务要去执行。调度器的作用就是调度任务如何在线程池中去执行。添加了数据生成时间之后可以看到各个线程的调度顺序如何。

```elixir
Enum.each(1..5, fn num_processes ->
  # `timer.tc` 用于计时
  {time, result} = :timer.tc(Scheduler, :run, [num_processes, FibSolver, :fib, to_process])

  if num_processes == 1 do
    IO.puts(inspect(result) |> String.split("},") |> Enum.join("\n"))
    IO.puts("\n # time(s)")
  end

  :io.format("~2B ~.2f~n", [num_processes, time / 1_000_000.0])
end)
```

<!-- livebook:{"output":true} -->

```
[{37, 24157817, ~T[06:14:37.391866]
 {37, 24157817, ~T[06:14:37.113264]
 {37, 24157817, ~T[06:14:36.834595]
 {37, 24157817, ~T[06:14:36.558546]
 {37, 24157817, ~T[06:14:36.280493]
 {37, 24157817, ~T[06:14:35.988872]
 {37, 24157817, ~T[06:14:35.703228]
 {37, 24157817, ~T[06:14:35.424814]
 {37, 24157817, ~T[06:14:35.148170]
 {37, 24157817, ~T[06:14:34.862374]
 {37, 24157817, ~T[06:14:34.585593]
 {37, 24157817, ~T[06:14:34.306187]
 {37, 24157817, ~T[06:14:34.030118]
 {37, 24157817, ~T[06:14:33.752137]
 {37, 24157817, ~T[06:14:33.476760]
 {37, 24157817, ~T[06:14:33.201725]
 {37, 24157817, ~T[06:14:32.923918]
 {37, 24157817, ~T[06:14:32.647704]
 {37, 24157817, ~T[06:14:32.370383]
 {37, 24157817, ~T[06:14:32.092140]}]

 # time(s) generated_time
 1 5.63
 2 2.82
 3 1.99
 4 1.52
 5 1.33
```

<!-- livebook:{"output":true} -->

```
:ok
```

### 思考——实现一个更通用的调度器

## Agents——A Teaser

Elixir 的模块只是函数的集合，并不携带状态，但是线程可以携带状态。自带的 `Agent` 模块可以抽象一个包含状态的线程，并提供了非常友好的 API 。

```elixir
defmodule FibAgent do
  def start_link do
    Agent.start_link(fn -> %{0 => 0, 1 => 1} end)
  end

  def fib(pid, n) when n >= 0 do
    Agent.get_and_update(pid, &do_fib(&1, n))
  end

  def do_fib(cache, n) do
    case cache[n] do
      nil ->
        {n_1, cache} = do_fib(cache, n - 1)
        result = n_1 + cache[n - 2]
        {result, Map.put(cache, n, result)}

      cached_value ->
        {cached_value, cache}
    end
  end
end

{:ok, agent} = FibAgent.start_link()
IO.puts(FibAgent.fib(agent, 2000))
```

<!-- livebook:{"output":true} -->

```
4224696333392304878706725602341482782579852840250681098010280137314308584370130707224123599639141511088446087538909603607640194711643596029271983312598737326253555802606991585915229492453904998722256795316982874482472992263901833716778060607011615497886719879858311468870876264597369086722884023654422295243347964480139515349562972087652656069529806499841977448720155612802665404554171717881930324025204312082516817125
```

<!-- livebook:{"output":true} -->

```
:ok
```

有关 `Agent`，具体可以看 [Agent](https://hexdocs.pm/elixir/1.13/Agent.html#get_and_update/3)。整个实现机制类似于 **Scala** 的 `State`，是一个有关状态的简单抽象，用于存储和获取不同线程的状态，抑或是获取同一线程在不同时间点的状态。
