<!-- livebook:{"persist_outputs":true} -->

# Tasks and Agents

## Tasks

`Task.async` creates a background process that runs the given function, once the task is running, the code continues with other work. If we want to get the function's value, we can call `Task.await(task)`:

```elixir
defmodule Fib do
  def of(0), do: 0
  def of(1), do: 1
  def of(n), do: of(n - 1) + of(n - 2)
end

IO.puts("Start the task...")
worker1 = Task.async(fn -> Fib.of(40) end)
worker2 = Task.async(Fib, :of, [20])
IO.puts("Do something else...")
IO.puts("Wait for the task...")
result1 = Task.await(worker1)
result2 = Task.await(worker2)
IO.puts("result1 = #{result1} result2 = #{result2}")
```

<!-- livebook:{"output":true} -->

```
Start the task...
Do something else...
Wait for the task...
result1 = 102334155 result2 = 6765
```

<!-- livebook:{"output":true} -->

```
:ok
```

### Tasks and Supervison

Tasks are implemented as OTP servers, which means we can add them to our application's supervision tree.

## Agents

> An agent is a background process that maintains state. This state can be
> accessed at different places within a process or node, or across multiple nodes.
> The initial state is set by a function we pass in when we start the agent.

```elixir
{:ok, count} = Agent.start(fn -> 0 end)
```

<!-- livebook:{"output":true} -->

```
{:ok, #PID<0.377.0>}
```

```elixir
Agent.get(count, & &1)
```

<!-- livebook:{"output":true} -->

```
0
```

```elixir
Agent.update(count, &(&1 + 1))
```

<!-- livebook:{"output":true} -->

```
:ok
```

```elixir
Agent.get(count, & &1)
```

<!-- livebook:{"output":true} -->

```
1
```

*count* hoolds the agent process's PID, we can also give agents a local or global name and access them using this name.

```elixir
Agent.start(fn -> 1 end, name: :Sum)
```

<!-- livebook:{"output":true} -->

```
<<<<<<< HEAD
{:ok, #PID<0.378.0>}
=======
{:ok, #PID<0.572.0>}
>>>>>>> 4c8a4758c8b633cd949bdd6094263f0a20cb9f41
```

```elixir
Agent.get(:Sum, & &1)
```

<!-- livebook:{"output":true} -->

```
1
```

The following example shows a more typical use. The `Frequence` module maintains a list of word/frequency pairs in a map:

```elixir
defmodule Frequency do
  def start_link do
    Agent.start_link(fn -> %{} end, name: __MODULE__)
  end

  def add_word(word) do
    Agent.update(__MODULE__, fn map -> Map.update(map, word, 1, &(&1 + 1)) end)
  end

  def count_for(word) do
    Agent.get(__MODULE__, fn map -> map[word] end)
  end

  def words do
    Agent.get(__MODULE__, fn map -> Map.keys(map) end)
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Frequency, <<70, 79, 82, 49, 0, 0, 10, ...>>, {:words, 0}}
```

```elixir
Frequency.start_link()
Frequency.add_word("dave")
```

<!-- livebook:{"output":true} -->

```
:ok
```

```elixir
Frequency.words()
```

<!-- livebook:{"output":true} -->

```
["dave"]
```

```elixir
Frequency.add_word("was")
Frequency.add_word("here")
Frequency.add_word("was")
Frequency.add_word("he")
Frequency.add_word("dave")
```

<!-- livebook:{"output":true} -->

```
:ok
```

```elixir
Frequency.count_for("dave")
```

<!-- livebook:{"output":true} -->

```
2
```

## A Bigger Example

```elixir
defmodule Dictionary do
  @name __MODULE__

  # External API
<<<<<<< HEAD
  def start_link, do: Agent.start_link(fn -> %{} end, name: @name)
=======
  def start_link,
    do: Agent.start_link(fn -> %{} end, name: @name)
>>>>>>> 4c8a4758c8b633cd949bdd6094263f0a20cb9f41

  def add_words(words),
    do: Agent.update(@name, &do_add_words(&1, words))

  def anagrams_of(word),
    do: Agent.get(@name, &Map.get(&1, signature_of(word)))

<<<<<<< HEAD
  # Internal implementation
  defp do_add_words(map, words) do
    Enum.reduce(words, map, &add_one_word(&1, &2))
  end

  defp add_one_word(word, map) do
    Map.update(map, signature_of(word), [word], &[word | &1])
  end

  defp signature_of(word) do
    word
    |> to_charlist
    |> Enum.sort()
    |> to_string
  end
end

defmodule WordlistLoader do
  def load_from_files(file_names) do
    file_names
    |> Stream.map(fn name -> Task.async(fn -> load_task(name) end) end)
    |> Enum.map(&Task.await/1)
  end

  defp load_task(file_name) do
    File.stream!(file_name, [], :line)
    |> Enum.map(&String.trim/1)
    |> Dictionary.add_words()
  end
=======
  def get, do: Agent.get(@name, & &1)

  # Internal implementation
  defp do_add_words(map, words),
    do: Enum.reduce(words, map, &add_one_word(&1, &2))

  # 添加一个单词。*key* 是单词的顺序表示，*value* 是输入的单词。
  defp add_one_word(word, map),
    do: Map.update(map, signature_of(word), [word], &[word | &1])

  # 生成一个单词的标签。
  defp signature_of(word),
    do: word |> to_charlist |> Enum.sort() |> to_string
>>>>>>> 4c8a4758c8b633cd949bdd6094263f0a20cb9f41
end
```

<!-- livebook:{"output":true} -->

```
<<<<<<< HEAD
{:module, WordlistLoader, <<70, 79, 82, 49, 0, 0, 8, ...>>, {:load_task, 1}}
```

### Run our programms

<!-- livebook:{"break_markdown":true} -->

We have four wordlists under *words/*  :

```elixir
proj_dir = "C:\\Users\\chris\\IdeaProjects\\learn-elixir"
File.ls("#{proj_dir}/words")
```

<!-- livebook:{"output":true} -->

```
{:ok, ["list1", "list2", "list3", "list4"]}
```

And now we can run our program:
=======
{:module, Dictionary, <<70, 79, 82, 49, 0, 0, 13, ...>>, {:signature_of, 1}}
```

### 测试
>>>>>>> 4c8a4758c8b633cd949bdd6094263f0a20cb9f41

```elixir
Dictionary.start_link()
```

<!-- livebook:{"output":true} -->

```
<<<<<<< HEAD
{:ok, #PID<0.662.0>}
```

```elixir
1..4
|> Enum.map(&"#{proj_dir}/words/list#{&1}")
|> WordlistLoader.load_from_files()
=======
{:ok, #PID<0.631.0>}
```

```elixir
Dictionary.add_words(["Hello", "World", "Sleepy", "cat", "Wodlr"])
>>>>>>> 4c8a4758c8b633cd949bdd6094263f0a20cb9f41
```

<!-- livebook:{"output":true} -->

```
<<<<<<< HEAD
[:ok, :ok, :ok, :ok]
```

```elixir
Dictionary.anagrams_of("organ")
=======
:ok
```

```elixir
Dictionary.get()
>>>>>>> 4c8a4758c8b633cd949bdd6094263f0a20cb9f41
```

<!-- livebook:{"output":true} -->

```
<<<<<<< HEAD
["ronga", "rogan", "orang", "nagor", "groan", "grano", "goran", "argon", "angor"]
```

### Making It Distributed

```elixir

=======
%{
  "Hello" => ["Hello", "Hello"],
  "Seelpy" => ["Sleepy", "Sleepy"],
  "Wdlor" => ["Wodlr", "World", "World"],
  "act" => ["cat", "cat"]
}
>>>>>>> 4c8a4758c8b633cd949bdd6094263f0a20cb9f41
```
