# Tasks and Agents

## Tasks and Agents

### Tasks

`Task.async` creates a background process that runs the given function, once the task is running, the code continues with other work. If we want to get the function's value, we can call `Task.await(task)`:

```elixir
defmodule Fib do
  def of(0), do: 0
  def of(1), do: 1
  def of(n), do: of(n - 1) + of(n - 2)
end

IO.puts("Start the task...")
worker1 = Task.async(fn -> Fib.of(40) end)
worker2 = Task.async(Fib, :of, [20])
IO.puts("Do something else...")
IO.puts("Wait for the task...")
result1 = Task.await(worker1)
result2 = Task.await(worker2)
IO.puts("result1 = #{result1} result2 = #{result2}")
```

### Tasks and Supervison

Tasks are implemented as OTP servers, which means we can add them to our application's supervision tree.

```elixir
{:ok, count} = Agent.start(fn -> 0 end)
```

## Agents

> An agent is a background process that maintains state. This state can be
> accessed at different places within a process or node, or across multiple nodes.
> The initial state is set by a function we pass in when we start the agent.

```elixir
Agent.get(count, & &1)
```

```elixir
Agent.update(count, &(&1 + 1))
```

```elixir
Agent.get(count, & &1)
```

*count* holds the agent process's PID, we can also give agents a local or global name and access them using this name.

```elixir
Agent.start(fn -> 1 end, name: :Sum)
```

```elixir
Agent.get(:Sum, & &1)
```

The following example shows a more typical use. The `Frequence` module maintains a list of word/frequency pairs in a map:

```elixir
defmodule Frequency do
  def start_link do
    Agent.start_link(fn -> %{} end, name: __MODULE__)
  end

  def add_word(word) do
    Agent.update(__MODULE__, fn map -> Map.update(map, word, 1, &(&1 + 1)) end)
  end

  def count_for(word) do
    Agent.get(__MODULE__, fn map -> map[word] end)
  end

  def words do
    Agent.get(__MODULE__, fn map -> Map.keys(map) end)
  end
end
```

```elixir
Frequency.start_link()
Frequency.add_word("dave")
```

```elixir
Frequency.words()
```

```elixir
Frequency.add_word("was")
Frequency.add_word("here")
Frequency.add_word("was")
Frequency.add_word("he")
Frequency.add_word("dave")
```

```elixir
Frequency.count_for("dave")
```

### A Bigger Example

```elixir
defmodule Dictionary do
  @name __MODULE__

  # External API
  def start_link, do: Agent.start_link(fn -> %{} end, name: @name)

  def add_words(words),
    do: Agent.update(@name, &do_add_words(&1, words))

  def anagrams_of(word),
    do: Agent.get(@name, &Map.get(&1, signature_of(word)))

  # Internal implementation
  defp do_add_words(map, words) do
    Enum.reduce(words, map, &add_one_word(&1, &2))
  end

  defp add_one_word(word, map) do
    Map.update(map, signature_of(word), [word], &[word | &1])
  end

  defp signature_of(word) do
    word
    |> to_charlist
    |> Enum.sort()
    |> to_string
  end
end

defmodule WordlistLoader do
  def load_from_files(file_names) do
    file_names
    |> Stream.map(fn name -> Task.async(fn -> load_task(name) end) end)
    |> Enum.map(&Task.await/1)
  end

  defp load_task(file_name) do
    File.stream!(file_name, [], :line)
    |> Enum.map(&String.trim/1)
    |> Dictionary.add_words()
  end
end
```

#### Run our programms

<!-- livebook:{"break_markdown":true} -->

We have four wordlists under *words/*  :

```elixir
proj_dir = "C:\\Users\\chris\\IdeaProjects\\learn-elixir"
File.ls("#{proj_dir}\\words")
```

Let's run our program:

```elixir
Dictionary.start_link()
```

```elixir
1..4
|> Enum.map(&"#{proj_dir}\\words\\list#{&1}")
|> WordlistLoader.load_from_files()
```

```elixir
Dictionary.anagrams_of("organ")
```

### Making It Distributed

<!-- livebook:{"break_markdown":true} -->

Start two seperate nodes, and compile our `anagrams.exs` code. Here is the out put of our node one:

<!-- livebook:{"force_markdown":true} -->

```elixir
(base) PS C:\Users\chris\IdeaProjects\learn-elixir> iex.bat --sname one --cookie "cookie-20220819190-31161 " .\anagrams.exs
Interactive Elixir (1.13.4) - press Ctrl+C to exit (type h() ENTER for help)
iex(one@zeta2)1> Node.connect :two@zeta2
true
iex(one@zeta2)2> Node.list
[:two@zeta2]
iex(one@zeta2)3> DDictionary.start_link
{:ok, #PID<0.127.0>}
iex(one@zeta2)4> DWordlistLoader.load_from_files(~w{words/list1 words/list2})
[:ok, :ok]
iex(one@zeta2)5> DDictionary.anagrams_of "argon"
["ronga", "rogan", "orang", "nagor", "groan", "grano", "goran", "argon",
 "angor"]
iex(one@zeta2)6>
```

And here is another node's output:

<!-- livebook:{"force_markdown":true} -->

```elixir
(base) PS C:\Users\chris\IdeaProjects\learn-elixir> iex.bat --sname two --cookie "cookie-20220819190-31161 " .\anagrams.exs
Interactive Elixir (1.13.4) - press Ctrl+C to exit (type h() ENTER for help)
iex(two@zeta2)1> Node.list
[:one@zeta2]
iex(two@zeta2)2> DDictionary.start_link
{:error, {:already_started, #PID<16650.127.0>}}
iex(two@zeta2)3> DWordlistLoader.load_from_files(~w{words/list4 words/list3})
[:ok, :ok]
iex(two@zeta2)4> DDictionary.anagrams_of "crate"
["recta", "react", "creta", "creat", "crate", "cater", "carte", "caret"]
iex(two@zeta2)5>
```
